//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity rotationSpeedEntity { get { return GetGroup(GameMatcher.RotationSpeed).GetSingleEntity(); } }
    public RotationSpeedComponent rotationSpeed { get { return rotationSpeedEntity.rotationSpeed; } }
    public bool hasRotationSpeed { get { return rotationSpeedEntity != null; } }

    public GameEntity SetRotationSpeed(float newValue) {
        if (hasRotationSpeed) {
            throw new Entitas.EntitasException("Could not set RotationSpeed!\n" + this + " already has an entity with RotationSpeedComponent!",
                "You should check if the context already has a rotationSpeedEntity before setting it or use context.ReplaceRotationSpeed().");
        }
        var entity = CreateEntity();
        entity.AddRotationSpeed(newValue);
        return entity;
    }

    public void ReplaceRotationSpeed(float newValue) {
        var entity = rotationSpeedEntity;
        if (entity == null) {
            entity = SetRotationSpeed(newValue);
        } else {
            entity.ReplaceRotationSpeed(newValue);
        }
    }

    public void RemoveRotationSpeed() {
        rotationSpeedEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public RotationSpeedComponent rotationSpeed { get { return (RotationSpeedComponent)GetComponent(GameComponentsLookup.RotationSpeed); } }
    public bool hasRotationSpeed { get { return HasComponent(GameComponentsLookup.RotationSpeed); } }

    public void AddRotationSpeed(float newValue) {
        var index = GameComponentsLookup.RotationSpeed;
        var component = (RotationSpeedComponent)CreateComponent(index, typeof(RotationSpeedComponent));
        component.value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceRotationSpeed(float newValue) {
        var index = GameComponentsLookup.RotationSpeed;
        var component = (RotationSpeedComponent)CreateComponent(index, typeof(RotationSpeedComponent));
        component.value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveRotationSpeed() {
        RemoveComponent(GameComponentsLookup.RotationSpeed);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherRotationSpeed;

    public static Entitas.IMatcher<GameEntity> RotationSpeed {
        get {
            if (_matcherRotationSpeed == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.RotationSpeed);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherRotationSpeed = matcher;
            }

            return _matcherRotationSpeed;
        }
    }
}
